{"name":"ControlCalefaccion","type":"virtual_device","properties":{"deviceIcon":1061,"currentIcon":"1061","log":"Calefacción - 00ºC / __h","logTemp":"TxtGreen","mainLoop":"--[[ControlCalefaccion\n\tDispositivo virtual\n\tmainLoop.lua\n\tpor Manuel Pascual\n------------------------------------------------------------------------------]]\n\n--[[----- NO CAMBIAR EL CODIGO A PARTIR DE AQUI ------------------------------]]\n\n--[[----- CONFIGURACION AVANZADA ---------------------------------------------]]\nlocal _selfId = fibaro:getSelfId()  -- ID de este dispositivo virtual\n--[[----- FIN CONFIGURACION AVANZADA -----------------------------------------]]\n\n--[[\ngetLog()\n  parametros: tabla con el panel\n\tretorno: devuelve el id del icono correspondiente al tipo de programación\n------------------------------------------------------------------------------]]\nfunction getLog(panel)\n  local tempAct, hora, icono\n  if panel.properties.handTemperature ~= 0 then\n    -- obtener datos reales del panel\n    tempAct =  panel.properties.handTemperature\n    hora = math.ceil((panel.properties.handTimestamp - os.time()) / 3600)\n    if hora < 0 then hora = 0 end\n    hora = string.format('%02d', hora)\n  elseif panel.properties.vacationTemperature ~= 0 then\n    tempAct =  panel.properties.vacationTemperature\n    hora = '__'\n  else\n    tempAct =  0\n    hora = '__'\n  end\n  tempAct = string.format('%02d', tostring(tempAct))\n  return tempAct, hora\nend\n\n--[[--------BUCLE DE CONTROL -------------------------------------------------]]\nwhile true do\n  --\n  fibaro:sleep(1000)\n  -- obtener zona\n  local zona, zonaId, tempAct, hora\n  zona = fibaro:get(_selfId, 'ui.zonaLabel.value')\n  zonaId = string.sub(zona, 1, string.find(zona, '-', 1) -1)\n  zona = string.sub(zona, string.find(zona, '-', 1) + 1, #zona)\n  -- obtener datos reales del panel\n  if not HC2 then\n    HC2 = Net.FHttp(\"127.0.0.1\", 11111)\n  end\n  response ,status, errorCode = HC2:GET(\"/api/panels/heating/\"..zonaId)\n  local panel = json.decode(response)\n\n  -- obtener temperatura y hora\n  tempAct, hora = getLog(panel)\n\n  -- comprobar si el tiempo ha expirado\n  if hora == '00' then\n    -- poner la temperatura manual a 0\n    panel.properties['handTemperature'] = 0\n    -- guardar valores\n    HC2:PUT(\"/api/panels/heating/\"..zonaId, json.encode(panel))\n  end\n\n  --refrescar log\n  fibaro:log(zona..' - '..tempAct..'ºC / '..hora..'h')\nend\n--[[--------------------------------------------------------------------------]]\n","ui.modoLabel.value":"Manual","ui.tempParaLabel.value":"00ºC / 00h","ui.zonaLabel.value":"534-Calefacción","visible":"true","rows":[{"type":"label","elements":[{"id":1,"lua":false,"waitForResponse":false,"caption":"Zona:","name":"zonaLabel","favourite":false,"main":false}]},{"type":"button","elements":[{"id":2,"lua":true,"waitForResponse":false,"caption":"Modo ▼","name":"chModoButton","empty":false,"msg":"--[[ControlCalefaccion\n\tDispositivo virtual\n\tmodoButton.lua\n\tpor Manuel Pascual\n------------------------------------------------------------------------------]]\n\n--[[----- CONFIGURACION AVANZADA ---------------------------------------------]]\nlocal _selfId = fibaro:getSelfId()  -- ID de este dispositivo virtual\n--[[----- FIN CONFIGURACION AVANZADA -----------------------------------------]]\n\nlocal modos = {'Manual', 'Vacaciones'}\nlocal modo  = fibaro:get(_selfId, 'ui.modoLabel.value')\n\nif modo == modos[1] then\n  modo = modos[2]\nelse\n  modo = modos[1]\nend\n\n-- actualizar la etiqueta del modo\nfibaro:call(_selfId, \"setProperty\", \"ui.modoLabel.value\", modo)\n\n-- actualizar las etiquetas con estado real de temperatura\nfibaro:call(_selfId, \"pressButton\", \"13\")\n\n","buttonIcon":0,"favourite":false,"main":false},{"id":3,"lua":false,"waitForResponse":false,"caption":"","name":"button_1_0","empty":true,"msg":"","buttonIcon":0,"favourite":false,"main":false},{"id":4,"lua":true,"waitForResponse":false,"caption":"Zona ▲","name":"chZonaButton","empty":false,"msg":"--[[ControlCalefaccion\n\tDispositivo virtual\n\tchZonaButton.lua\n\tpor Manuel Pascual\n------------------------------------------------------------------------------]]\n\n--[[----- CONFIGURACION AVANZADA ---------------------------------------------]]\nlocal _selfId = fibaro:getSelfId()  -- ID de este dispositivo virtual\n--[[----- FIN CONFIGURACION AVANZADA -----------------------------------------]]\n\nif not HC2 then\n  HC2 = Net.FHttp(\"127.0.0.1\", 11111)\nend\n-- obtener zonas\nresponse ,status, errorCode = HC2:GET(\"/api/panels/heating\")\nlocal zonas = json.decode(response)\n\n-- seleccionar la siguiete zona que corresponda\nlocal zona = fibaro:get(_selfId, 'ui.zonaLabel.value')\nlocal myKey = 1\nlocal zonas = json.decode(response)\nfor key, value in pairs(zonas) do\n  if value.id..'-'..value.name == zona then\n    if key < #zonas then myKey = key + 1 else myKey = 1 end\n    break\n  else\n    myKey = #zonas\n  end\nend\n\n-- actualizar la etiqueta de zona\nfibaro:call(_selfId, \"setProperty\", \"ui.zonaLabel.value\",\n zonas[myKey].id..'-'..zonas[myKey].name) -- ..' '..'00ºC/00ºC'\n\n-- actualizar las etiquetas con estado real de temperatura\nfibaro:call(_selfId, \"pressButton\", \"13\")\n\n-- obtener termostato\n--response ,status, errorCode = HC2:GET('/api/panels/heating/'..zonas[myKey].id)\n--local panel = json.decode(response)\n--local room = panel.properties.rooms[1]\n-- obtener habitacion\n--response ,status, errorCode = HC2:GET('/api/rooms/'..room)\n--local termostato = tonumber(json.decode(response).defaultThermostat)\n--fibaro:debug(termostato)\n--local tempConsigna = fibaro:get(termostato, 'targetLevel')\n--local tiempo = fibaro:get(termostato, 'timestamp')\n","buttonIcon":0,"favourite":false,"main":true}]},{"type":"label","elements":[{"id":5,"lua":false,"waitForResponse":false,"caption":"Modo:","name":"modoLabel","favourite":false,"main":false}]},{"type":"label","elements":[{"id":6,"lua":false,"waitForResponse":false,"caption":"Temp/Durante:","name":"tempParaLabel","favourite":false,"main":false}]},{"type":"button","elements":[{"id":7,"lua":true,"waitForResponse":false,"caption":"- ºC","name":"menosTempButton","empty":false,"msg":"--[[ControlCalefaccion\n\tDispositivo virtual\n\tmenosTempButton.lua\n\tpor Manuel Pascual\n------------------------------------------------------------------------------]]\n\n--[[----- CONFIGURACION AVANZADA ---------------------------------------------]]\nlocal _selfId = fibaro:getSelfId()  -- ID de este dispositivo virtual\n--[[----- FIN CONFIGURACION AVANZADA -----------------------------------------]]\n\nlocal tempMax = 28\nlocal index\nlocal tempAct = fibaro:get(_selfId, 'ui.tempParaLabel.value')\nlocal para = string.sub(tempAct, -3, -2)\ntempAct = string.sub(tempAct, 1, 2)\nfor t = 0, tempMax, 1 do\n  if tempAct == string.format('%02d', tostring(t)) then\n    index = t\n    break\n  end\n  index = t\nend\nif index > 0 then\n  tempAct = string.format('%02d', tostring(index - 1))\nelse\n  tempAct = string.format('%02d', tostring(tempMax))\nend\nfibaro:call(_selfId, \"setProperty\", 'ui.tempParaLabel.value',\n  tempAct..'ºC / '..para..'h')\n\nlocal habitacion = fibaro:getRoomID(_selfId)\nif not HC2 then\n  HC2 = Net.FHttp(\"127.0.0.1\", 11111)\nend\n","buttonIcon":0,"favourite":false,"main":false},{"id":8,"lua":true,"waitForResponse":false,"caption":"+ ºC","name":"masTempButton","empty":false,"msg":"--[[ControlCalefaccion\n\tDispositivo virtual\n\tmasTempButton.lua\n\tpor Manuel Pascual\n------------------------------------------------------------------------------]]\n\n--[[----- CONFIGURACION AVANZADA ---------------------------------------------]]\nlocal _selfId = fibaro:getSelfId()  -- ID de este dispositivo virtual\n--[[----- FIN CONFIGURACION AVANZADA -----------------------------------------]]\n\nlocal tempMax = 28\nlocal index\nlocal tempAct = fibaro:get(_selfId, 'ui.tempParaLabel.value')\nlocal para = string.sub(tempAct, -3, -2)\ntempAct = string.sub(tempAct, 1, 2)\nfor t = 0, tempMax, 1 do\n  if tempAct == string.format('%02d', tostring(t)) then\n    index = t\n    break\n  end\n  index = t\nend\nif index < tempMax then\n  tempAct = string.format('%02d', tostring(index + 1))\nelse\n  tempAct = string.format('%02d', tostring(0))\nend\nfibaro:call(_selfId, \"setProperty\", 'ui.tempParaLabel.value',\n  tempAct..'ºC / '..para..'h')\n\nlocal habitacion = fibaro:getRoomID(_selfId)\nif not HC2 then\n  HC2 = Net.FHttp(\"127.0.0.1\", 11111)\nend\n","buttonIcon":0,"favourite":false,"main":false},{"id":9,"lua":true,"waitForResponse":false,"caption":"- H","name":"menosHoraButton","empty":false,"msg":"--[[ControlCalefaccion\n\tDispositivo virtual\n\tmenosHoraButton.lua\n\tpor Manuel Pascual\n------------------------------------------------------------------------------]]\n\n--[[----- CONFIGURACION AVANZADA ---------------------------------------------]]\nlocal _selfId = fibaro:getSelfId()  -- ID de este dispositivo virtual\n--[[----- FIN CONFIGURACION AVANZADA -----------------------------------------]]\n\nlocal modo = fibaro:get(_selfId, 'ui.modoLabel.value')\n-- si el modo es vacacions mo se puede seleccionar hora\nif modo ~= \"Vacaciones\" then\n  local tempAct = fibaro:get(_selfId, 'ui.tempParaLabel.value')\n  local tiemMax = 23\n  local index\n  local para = string.sub(tempAct, -3, -2)\n  tempAct = string.sub(tempAct, 1, 2)\n  for t = 0, tiemMax, 1 do\n    fibaro:debug(para..' '..string.format('%02d', tostring(t)))\n    if para == string.format('%02d', tostring(t)) then\n      index = t\n      break\n    end\n    index = t\n  end\n  if index > 0 then\n    para = string.format('%02d', tostring(index - 1))\n  else\n    para = string.format('%02d', tostring(tiemMax))\n  end\n  fibaro:call(_selfId, \"setProperty\", 'ui.tempParaLabel.value',\n    tempAct..'ºC / '..para..'h')\n\n  local habitacion = fibaro:getRoomID(_selfId)\n  if not HC2 then\n    HC2 = Net.FHttp(\"127.0.0.1\", 11111)\n  end\nend\n","buttonIcon":0,"favourite":false,"main":false},{"id":10,"lua":true,"waitForResponse":false,"caption":"+ H","name":"masHoraButton","empty":false,"msg":"--[[ControlCalefaccion\n\tDispositivo virtual\n\tmasHoraButton.lua\n\tpor Manuel Pascual\n------------------------------------------------------------------------------]]\n\n--[[----- CONFIGURACION AVANZADA ---------------------------------------------]]\nlocal _selfId = fibaro:getSelfId()  -- ID de este dispositivo virtual\n--[[----- FIN CONFIGURACION AVANZADA -----------------------------------------]]\n\nlocal modo = fibaro:get(_selfId, 'ui.modoLabel.value')\n-- si el modo es vacacions mo se puede seleccionar hora\nif modo ~= \"Vacaciones\" then\n  local tempAct = fibaro:get(_selfId, 'ui.tempParaLabel.value')\n  local tiemMax = 23\n  local index\n  local para = string.sub(tempAct, -3, -2)\n  tempAct = string.sub(tempAct, 1, 2)\n  for t = 0, tiemMax, 1 do\n    fibaro:debug(para..' '..string.format('%02d', tostring(t)))\n    if para == string.format('%02d', tostring(t)) then\n      index = t\n      break\n    end\n    index = t\n  end\n  if index < tiemMax then\n    para = string.format('%02d', tostring(index + 1))\n  else\n    para = string.format('%02d', tostring(0))\n  end\n  fibaro:call(_selfId, \"setProperty\", 'ui.tempParaLabel.value',\n    tempAct..'ºC / '..para..'h')\nend\n","buttonIcon":0,"favourite":false,"main":false}]},{"type":"button","elements":[{"id":11,"lua":true,"waitForResponse":false,"caption":"Grabar","name":"grabarButton","empty":false,"msg":"--[[ControlCalefaccion\n\tDispositivo virtual\n\tgrabarButton.lua\n\tpor Manuel Pascual\n------------------------------------------------------------------------------]]\n\n--[[----- CONFIGURACION AVANZADA ---------------------------------------------]]\nlocal _selfId = fibaro:getSelfId()  -- ID de este dispositivo virtual\n--[[----- FIN CONFIGURACION AVANZADA -----------------------------------------]]\n\nfunction calcularTimestamp(hora)\n  --local cuando = os.date('*t', os.time())\n  --cuando.hour = tonumber(hora)\n  --cuando.min = 0\n  --cuando.sec = 0\n  --return os.time(cuando)\n  return os.time()+(hora*3600)\nend\n\n-- obtener zona actual\nlocal zona = fibaro:get(_selfId, 'ui.zonaLabel.value')\nzona = string.sub(zona, 1, string.find(zona, '-', 1) - 1)\n\n-- obtener temperatura\nlocal temp = fibaro:get(_selfId, 'ui.tempParaLabel.value')\n-- obtener hora\nlocal hora = string.sub(temp, -3, -2)\ntemp = string.sub(temp, 1, 2)\n-- obtener modo actual\nlocal modo  = fibaro:get(_selfId, 'ui.modoLabel.value')\nfibaro:debug('modo: '..modo..' temp: '..temp)\n\n-- obtener panel correspondiente\nif not HC2 then\n  HC2 = Net.FHttp(\"127.0.0.1\", 11111)\nend\nresponse ,status, errorCode = HC2:GET(\"/api/panels/heating/\"..zona)\nlocal panel = json.decode(response)\n\n-- asignar valores\n-- si el modo es \"Manual\" guardar handTemperature y handTimestamp y poner\n-- vacationTemperature a 0\nif modo == 'Manual' then\n  panel.properties['handTemperature'] = tonumber(temp)\n  panel.properties.handTimestamp = tonumber(calcularTimestamp(hora))\n  panel.properties['vacationTemperature'] = 0\n-- si es \"Vacaciones\", grabar vacationTemperatur y poner handTemperature a 0\nelse\n  panel.properties['handTemperature'] = 0\n  panel.properties['vacationTemperature'] = tonumber(temp)\nend\n\n-- guardar valores\nHC2:PUT(\"/api/panels/heating/\"..zona, json.encode(panel))\n\n-- actualizar las etiquetas con estado real de temperatura\nfibaro:call(_selfId, \"pressButton\", \"13\")\n","buttonIcon":0,"favourite":false,"main":false},{"id":12,"lua":true,"waitForResponse":false,"caption":"Borrar","name":"borrarButton","empty":false,"msg":"--[[ControlCalefaccion\n\tDispositivo virtual\n\tborrarButton.lua\n\tpor Manuel Pascual\n------------------------------------------------------------------------------]]\n\n--[[----- CONFIGURACION AVANZADA ---------------------------------------------]]\nlocal _selfId = fibaro:getSelfId()  -- ID de este dispositivo virtual\n--[[----- FIN CONFIGURACION AVANZADA -----------------------------------------]]\n\n-- obtener zona actual\nlocal zona = fibaro:get(_selfId, 'ui.zonaLabel.value')\nzona = string.sub(zona, 1, string.find(zona, '-', 1) - 1)\n-- obtener modo actual\nlocal modo  = fibaro:get(_selfId, 'ui.modoLabel.value')\n\n-- si el modo es vacaciones grabar vacationTemperature y no grabar\n-- handTimestamp\nlocal claveTemp = 'vacationTemperature'\nlocal handTimestamp = false\n-- si el modo es manual guardar handTemperature y handTimestamp\nif modo == 'Manual' then\n  claveTemp = 'handTemperature'\n  handTimestamp = os.time()\nend\n\nif not HC2 then\n  HC2 = Net.FHttp(\"127.0.0.1\", 11111)\nend\nresponse ,status, errorCode = HC2:GET(\"/api/panels/heating/\"..zona)\nlocal panel = json.decode(response)\n\n-- asignar valores\nif handTimestamp then\n  panel.properties.handTimestamp = tonumber(handTimestamp)\nend\npanel.properties[claveTemp] = 0\n\n-- guardar valores\nHC2:PUT(\"/api/panels/heating/\"..zona, json.encode(panel))\n\n-- actualizar las etiquetas con estado real de temperatura\nfibaro:call(_selfId, \"pressButton\", \"13\")\n","buttonIcon":0,"favourite":false,"main":false},{"id":13,"lua":true,"waitForResponse":false,"caption":"Act⏎","name":"actButton","empty":false,"msg":"--[[ControlCalefaccion\n\tDispositivo virtual\n\tactButton.lua\n\tpor Manuel Pascual\n------------------------------------------------------------------------------]]\n\n--[[----- CONFIGURACION DE USUARIO -------------------------------------------]]\niconoProgra = 1061  -- id del icono de temperatura programada\niconoManual = 1062  -- id del icono de temperatura manual\niconoVacaci = 1050  -- id del icono de temperatura vacaciones\n--[[----- FIN CONFIGURACION DE USUARIO ---------------------------------------]]\n\n--[[----- NO CAMBIAR EL CODIGO A PARTIR DE AQUI ------------------------------]]\n\n--[[----- CONFIGURACION AVANZADA ---------------------------------------------]]\nlocal _selfId = fibaro:getSelfId()  -- ID de este dispositivo virtual\n--[[----- FIN CONFIGURACION AVANZADA -----------------------------------------]]\n\n--[[\ngetIcon()\n  parametros: tabla con el panel\n\tretorno: devuelve el id del icono correspondiente al tipo de programación\n------------------------------------------------------------------------------]]\nfunction getIcon(panel)\n  -- obtener datos reales del panel\n  local tempAct, hora, icono\n  if panel.properties.handTemperature ~= 0 then\n    -- obtener datos reales del panel\n    tempAct =  panel.properties.handTemperature\n    hora = math.ceil((panel.properties.handTimestamp - os.time()) / 3600)\n    if hora < 0 then hora = 0 end\n    hora = string.format('%02d', hora)\n    -- icono de temperatura manual\n    icono = iconoManual\n  elseif panel.properties.vacationTemperature ~= 0 then\n    -- icono de temperatura vacaciones\n    icono = iconoVacaci\n    tempAct =  panel.properties.vacationTemperature\n    hora = '__'\n  else\n    -- icono de temperatura programada\n    icono = iconoProgra\n    tempAct =  0\n    hora = '__'\n  end\n  tempAct = string.format('%02d', tostring(tempAct))\n  return icono, tempAct..'ºC / '..hora..'h'\nend\n\n--[[----------------------------------------------------------------------------\nredondea(num, idp)\n\t--\n--]]\nfunction redondea(num, idp)\n  local mult = 10^(idp or 0)\n  return math.floor(num * mult + 0.5) / mult\nend\n\n-- obtener zona actual\nlocal zona = fibaro:get(_selfId, 'ui.zonaLabel.value')\nlocal textoZona = string.sub(zona, string.find(zona, '-', 1) + 1, #zona)\nzona = string.sub(zona, 1, string.find(zona, '-', 1) - 1)\n\n-- obtener modo actual\nlocal modo  = fibaro:get(_selfId, 'ui.modoLabel.value')\n\n-- obtener datos reales del panel\nif not HC2 then\n  HC2 = Net.FHttp(\"127.0.0.1\", 11111)\nend\nresponse ,status, errorCode = HC2:GET(\"/api/panels/heating/\"..zona)\nlocal panel = json.decode(response)\n\nlocal tempAct, hora\n-- si el modo es manual actualizar handTemperature y handTimestamp\nif modo == 'Manual' then\n  tempAct =  panel.properties.handTemperature\n  -- hora = os.date('%H', panel.properties.handTimestamp)\n  hora = math.ceil((panel.properties.handTimestamp - os.time()) / 3600)\n  fibaro:debug(redondea((panel.properties.handTimestamp - os.time())/3600) )\n  if hora < 0 then hora = 0 end\n  hora = string.format('%02d', hora)\nelse -- si el modo es vacaciones actualizar vacationTemperature pero no mostrar\n-- handTimestamp\n  tempAct =  panel.properties.vacationTemperature\n  hora = '__'\nend\ntempAct = string.format('%02d', tostring(tempAct))\n\n-- actualizar valores de etiquetas\nfibaro:debug(tempAct..'ºC / '..hora..'h')\nfibaro:call(_selfId, \"setProperty\", 'ui.tempParaLabel.value',\n  tempAct..'ºC / '..hora..'h')\n\nlocal iconoId, tempHora =  getIcon(panel)\n-- refrescar icono\nfibaro:call(_selfId, 'setProperty', \"currentIcon\", iconoId)\n\n--refrescar log\nfibaro:debug(textoZona..' - '..tempHora)\n--fibaro:log(textoZona..' - '..tempAct..'ºC / '..hora..'h')\nfibaro:log(textoZona..' - '..tempHora)\n","buttonIcon":0,"favourite":false,"main":false}]}]},"actions":{"pressButton":1,"setSlider":2,"setProperty":2}}